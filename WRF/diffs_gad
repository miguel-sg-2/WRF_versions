2c2
< MODULE module_gen_act_disk
---
> MODULE module_nonrot_act_disk
8,12c8,9
< USE module_gad_psu15, ONLY: calc_rpm_psu15, calc_pitch_psu15, calc_fnft_psu15
< USE module_gad_ge16, ONLY: calc_rpm_ge16, calc_pitch_ge16, calc_fnft_ge16
< USE module_gad_dtu10, ONLY: calc_rpm_dtu10, calc_pitch_dtu10, calc_fnft_dtu10
< USE module_gad_nrel5, ONLY: calc_rpm_nrel5, calc_pitch_nrel5, calc_fnft_nrel5
< USE module_gad_ge28, ONLY: calc_rpm_ge28, calc_pitch_ge28, calc_fnft_ge28
---
> USE module_nonrot_gad_ge28 !, ONLY: calc_ct_p_ge28
> USE module_nonrot_gad_nrel5
20c17
<   SUBROUTINE gen_act_disk ( ru_tendf, rv_tendf, rw_tendf, &
---
>   SUBROUTINE nonRot_act_disk ( ru_tendf, rv_tendf, rw_tendf, &
42,43d38
<                             thrust, torque,               &
<                             rotrate, power,               &
55,80d49
< !-----------------------------------------------------------------------------
< !
< ! Purpose: To calculate forces using the generalized actuator disk model. 
< !
< ! See Mirocha et al. (2014), J. Renew. Sust. Energy:
< ! "Implementation of a generalized actuator disk wind turbine model into the
< ! weather research and forecasting model for large-eddy simulation applications"
< !
< ! Lookup tables use generic Penn State 1.5 MW GE SLE turbine (approximate).
< !
< ! Note that wind direction and turbine yaw are measured counterclockwise from
< ! 0 deg. for a westerly wind / west-facing turbine. Thus, 90 is a southerly
< ! wind / south-facing turbine, 180 is an easterly wind / east-facing turbine,
< ! 270 is a northerly wind / north-facing turbine, up to 360 deg.
< !
< ! Last modified 10/2018 by RSA and JDM. 
< ! - Code will not compute GAD forces if flow is from behind the turbine; turbine
< ! must first yaw into mean flow direction (when yaw error exceeds threshold) 
< ! before forces will be calculated.
< ! - Added ability specify upwind distance for turbine inflow calculation relative 
< ! to turbine hub.
< ! - Added ability to read in turbine info from a file specifying turbine
< ! parameters, including position in either x,y or lat,lon.
< !
< !=============================================================================
< 
137,138d105
<   REAL, DIMENSION( ims:ime, jms:jme ),            INTENT( OUT ) &
<   :: thrust, torque, rotrate, power
257,258c224,225
<   REAL, DIMENSION(2)    :: fnft
<   REAL                  :: fn, ft
---
>   REAL, DIMENSION(2)    :: ct_p
>   REAL                  :: CT,P,Thrust,Power
262c229
<   REAL                  :: rpm, blades, pitchdeg
---
>   REAL                  :: blades
274c241,242
<   REAL, DIMENSION(n_turbines) :: omega !turbine rotation rate (rad/s)
---
>   REAL, DIMENSION(n_turbines) :: count_turb_power_local !turbine number of counts on local processor
>   REAL, DIMENSION(n_turbines) :: count_turb_power
326a295
>   REAL :: pi=3.1415926535897932384626433
355d323
<   pitchdeg=  0.0
358d325
<   rpm     = 16.0
494,502d460
<         !RSA for debugging
<         ! print*,'y_turbine=',y_turbine(1)
<         ! print*,'x_turbine=',x_turbine(1)
<         ! print*,'lat1=',lat1
<         ! print*,'lon1=',lon1
<         ! print*,'dx=',dx
<         ! print*,'stand_lon=',stand_lon
<         ! print*,'truelat1=',truelat1
<         ! print*,'truelat2=',truelat2
507,509d464
< !print*,'CHECKING THAT VARIABLES ARE NON ZERO EVERY TIME A RESTART FILE INITIATES'
< !print*,x_turbine(:),y_turbine(:),'locs',hub_height(:),'hub height',rotor_diameter(:),'diameter',blade_length(:),'blades',theta_turbine(:),'angle',cutinspd(:),'cutin',cutoutspd(:),'cutout'
< 
523,530d477
<   ! RSA/JDM for debugging
<   ! DO i = i_start, i_end !only for visualizing instantaneous position of multiple turbines
<   ! DO j = j_start, j_end
<   ! DO k = 1, 20
<   !   wp_ts(i,k,j) = 0.0
<   ! ENDDO
<   ! ENDDO
<   ! ENDDO
710c657
<   IF (wp_opt .EQ. 3 ) THEN
---
>   IF (wp_opt .EQ. 10 ) THEN
740c687
<         IF (wp_opt .EQ. 3 ) THEN
---
>         IF (wp_opt .EQ. 10 ) THEN
752c699
<         IF (wp_opt .EQ. 3 ) THEN
---
>         IF (wp_opt .EQ. 10 ) THEN
758c705
<         IF (wp_opt .EQ. 3 ) THEN
---
>         IF (wp_opt .EQ. 10 ) THEN
775c722
<     IF (wp_opt .EQ. 3 ) THEN
---
>     IF (wp_opt .EQ. 10 ) THEN
786c733
<   IF (wp_opt .EQ. 3 ) THEN
---
>   IF (wp_opt .EQ. 10 ) THEN
792c739
< ! 4. Add current v0 to timeseries in v0t, compute current average, and calculate pitch and rpm
---
> ! 4. Add current v0 to timeseries in v0t and compute current average
796a744
>       count_turb_power_local(n) = 0.0
828,829d775
<       
<       !!!!! Turbine yawing !!!!!!
831c777
<       IF (wp_opt .EQ. 3) THEN
---
>       IF (wp_opt .EQ. 10) THEN
834,839c780,798
<                                                         ! During yawing, no new entries are stored in d0t(n) and 
<                                                         ! acc_yaw_err(n) remains fixed.Turbine n rotates toward
<                                                         ! the time average direction before yawing began,yaw_new. 
<                                                         ! The turbine rotates at yaw_rate until it is less than 
<                                                         ! yaw_rate*dt from yaw_new. At this point turbine_theta is
<                                                         ! set to yaw_new, yawing is set to 0, and everything starts over.
---
>                                                         ! During yawing, no new
>                                                         ! entries are stored in
>                                                         ! d0t(n) and 
>                                                         ! acc_yaw_err(n) remains
>                                                         ! fixed.Turbine n
>                                                         ! rotates toward
>                                                         ! the time average
>                                                         ! direction before
>                                                         ! yawing began,yaw_new. 
>                                                         ! The turbine rotates at
>                                                         ! yaw_rate until it is
>                                                         ! less than 
>                                                         ! yaw_rate*dt from
>                                                         ! yaw_new. At this point
>                                                         ! turbine_theta is
>                                                         ! set to yaw_new, yawing
>                                                         ! is set to 0, and
>                                                         ! everything starts
>                                                         ! over.
842c801
<           yawing(n) = 0 
---
>           yawing(n) = 0
848c807
<           IF ( delta .LT. -180.0 ) THEN 
---
>           IF ( delta .LT. -180.0 ) THEN
850c809
<           ELSE IF (delta .GE. 180.0 ) THEN 
---
>           ELSE IF (delta .GE. 180.0 ) THEN
860c819
<          ! PRINT *,"Turbine is yawing (MSG), theta turbine is",theta_turbine(n)
---
>          PRINT *,"Turbine is yawing (MSG), theta turbine is",theta_turbine(n)
864,865c823,824
<          delta = theta_turbine(n) - yaw_new  
<          IF ( delta .LT. -180.0 ) THEN 
---
>          delta = theta_turbine(n) - yaw_new
>          IF ( delta .LT. -180.0 ) THEN
867c826
<          ELSE IF (delta .GE. 180.0 ) THEN 
---
>          ELSE IF (delta .GE. 180.0 ) THEN
874c833
<          IF ( abs(yaw_inc) .GE. abs(delta) ) THEN 
---
>          IF ( abs(yaw_inc) .GE. abs(delta) ) THEN
885c844
<         IF ( theta_turbine(n) .GE. 360.0 ) theta_turbine(n) = theta_turbine(n) - 360.0
---
>         IF ( theta_turbine(n) .GE. 360.0 ) theta_turbine(n) = theta_turbine(n) -360.0
888c847
<       ENDIF !wp_opt .EQ. 3
---
>       ENDIF !wp_opt .EQ. 3      
891c850
<  !   print*,'Is the turbine on path?',turbine_on_patch(n),'1-> Yes, 0-> No'
---
>     print*,'Is the turbine on path?',turbine_on_patch(n),'1-> Yes, 0-> No'
895c854
<   !    print*,'current wind speed is:',v0t_avg,', cut in speed is:',cutinspd(n),', and cut out speed is:',cutoutspd(n)
---
>       print*,'current wind speed is:',v0t_avg,', cut in speed is:',cutinspd(n),', and cut out speed is:',cutoutspd(n)
900,927d858
<    !   print*,'TURBINE SHOULD BE OPERATING'
<       IF (turbine_opt .EQ. 15) THEN
<          rpm   = calc_rpm_psu15( v0t_avg )
<          pitchdeg = calc_pitch_psu15( v0t_avg )
<       ELSEIF (turbine_opt .EQ. 16) THEN
<          rpm   = calc_rpm_ge16( v0t_avg )
<          pitchdeg = calc_pitch_ge16( v0t_avg )
<       ELSEIF (turbine_opt .EQ. 28) THEN
<          rpm   = calc_rpm_ge28( v0t_avg )
<          pitchdeg = calc_pitch_ge28( v0t_avg )
<       ELSEIF (turbine_opt .EQ. 100) THEN
<          rpm = calc_rpm_dtu10( v0t_avg )
<          pitchdeg = calc_pitch_dtu10( v0t_avg )
<       ELSEIF (turbine_opt .EQ. 50) THEN
<          rpm   = calc_rpm_nrel5( v0t_avg )
<          pitchdeg = calc_pitch_nrel5( v0t_avg )
<       ENDIF
<    
<       omega(n) = 2.0*pi*rpm/60.0
< 
<       ! DO j = j_start, j_end
<       !   DO i = i_start, i_end
<       !      rotrate(i,j) = 2.0*pi*rpm/60.0
<       !      thrust(i,j)  = 0.0
<       !      torque(i,j)  = 0.0
<       !      power(i,j)   = 0.0
<       !   ENDDO
<       ! ENDDO
941c872
<       CALL calc_distance( x_turbine(n), y_turbine(n), theta_turbine(n), &
---
>       CALL calc_distance_2( x_turbine(n), y_turbine(n), theta_turbine(n), &
977,978d907
< !      adenom = sigma*sqrt(2.0*pi)
< !      bdenom  = 2.0*sigma*sigma
991c920
<       ! 6. Compute local lift and drag accelerations using instantaneous local velocity, and apply to u,v, and w tendencies
---
>       ! 6. Compute local thrust using instantaneous local velocity, and apply to u,v, and w tendencies
1025,1026c954,955
<                       fn = 0.5*rho*v0_u*v0_u*cdt !NM force per unit area for tower
<                       ft = 0.0 !NM no tangential force
---
>                       Thrust = 0.5*rho*v0_u*v0_u*cdt !NM force per unit area for tower
>                       !ft = 0.0 !NM no tangential force
1028c957
<                       fx = fn*cos(theta) !NM to x direction
---
>                       fx = Thrust*cos(theta) !NM to x direction
1037,1038c966,967
<                       fn = 0.5*rho*v0_v*v0_v*cdt !NM force per unit area for tower
<                       ft = 0.0 !NM no tangential force
---
>                       Thrust = 0.5*rho*v0_v*v0_v*cdt !NM force per unit area for tower
>                       !ft = 0.0 !NM no tangential force
1040c969
<                       fy = fn*sin(theta) !NM to x direction
---
>                       fy = Thrust*sin(theta) !NM to x direction
1048d976
<         ! IF ( (ru(i,k,j) .le. radmin) .and. (ru(i,k,j) .gt. -0.001) ) then !HUB-----------------------------------	
1051c979
<            fn = 0.5*rho*v0_u*v0_u*cdh  !NM only need force per unit area
---
>            Thrust = 0.5*rho*v0_u*v0_u*cdh  !NM only need force per unit area
1053,1056d980
<            ft = 0.0 !NM no tangential force
< 
<            !NM including off set of hub from tower hoff in + dru
<            !direction or opposite of wind direction U
1060c984
<                 fx = fn*cos(theta) 
---
>                 fx = Thrust*cos(theta) 
1065,1067d988
< !JDM	        thrust(i,k,j) = thrust(i,k,j)-fn*cos(theta)*acc_u     		
<                 !!thrust everywhere is equal to current thrust plus force distribution due to gaussian times normal force
< 
1080,1084c1001
< ! drut-----------------
< 
<              drut = calc_yprime( 1.0/tan(tilt), 1.0, 0.0, (dru(i,j)-hoff), dzu(i,k,j) ) 
< 
< ! zd-----------------
---
>              drut = calc_yprime_2( 1.0/tan(tilt), 1.0, 0.0, (dru(i,j)-hoff), dzu(i,k,j) ) 
1086c1003
<              zd = calc_yprime( -tan(tilt), 1.0, 0.0, (dru(i,j)-hoff), dzu(i,k,j) ) 
---
>              zd = calc_yprime_2( -tan(tilt), 1.0, 0.0, (dru(i,j)-hoff), dzu(i,k,j) ) 
1098,1111c1015,1016
<                 if (turbine_opt .eq. 15) then 
<      !              print*,'radius',radius,'blade_length',blade_length(n),'rotor_diameter',rotor_diameter(n),'dscale',dscale
<                    fnft = calc_fnft_psu15( v0_u, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<      !              print*,'done u-component' 
<                 elseif (turbine_opt .eq. 16) then
<                    fnft = calc_fnft_ge16( v0_u, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 elseif (turbine_opt .eq. 28) then
<                    fnft = calc_fnft_ge28( v0_u, rho, blades, blade_length(n),rotor_diameter(n),   &
<                                         radius, pitchdeg, rpm, dscale,cscale)
<                elseif (turbine_opt .eq. 100) then
<                    fnft = calc_fnft_dtu10( v0_u, rho, blades, blade_length(n),rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale,cscale)
---
>                 if (turbine_opt .eq. 28) then
>                     ct_p = calc_ct_p_ge28(v0_u)
1113,1114c1018
<                    fnft = calc_fnft_nrel5( v0_u, rho, blades,blade_length(n),rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm,dscale,cscale)
---
>                     ct_p = calc_ct_p_nrel5(v0_u)
1115a1020,1023
>                 CT = ct_p(1)
>                 P = ct_p(2)
>                 print*,'Thrust is ',CT,' and power is ',P
>                 Thrust = 0.5*rho*v0_u*v0_u*CT
1117,1120c1025
<                 fn = fnft(1)
<                 ft = fnft(2)
<      
<                 fx = fn*cos(theta)*cos(tilt) + ft*sin(zeta)*sin(theta) - ft*cos(zeta)*sin(tilt)*cos(theta)
---
>                 fx = Thrust*cos(theta)*cos(tilt) ! + ft*sin(zeta)*sin(theta) - ft*cos(zeta)*sin(tilt)*cos(theta)
1122,1123d1026
<                 !RSA set fx to 0 for now, but turbine should eventually yaw into place.
<                 ! write(*,*) "RSA to prevent NaNs, skipping call to calc_fnft for fx: i,j,k=",i,j,k 
1127,1133d1029
< !JDM TEST SIGN 12/2014     fx = fn*cos(theta)*cos(tilt) 
< !JDM TEST SIGN 12/2014     fx = ft*sin(zeta)*sin(theta) 
< !JDM TEST SIGN 12/2014     fx = -ft*cos(zeta)*sin(tilt)*cos(theta)
< 
< !print*,'i,j,k',k,j,i
< !print*,'v0, pitchdeg, rpm',v0, pitchdeg, rpm
< !print*,'fn,ft,fx,accu',fn,ft,fx,acc_u
1138d1033
<               ! wp_ts(i,k,j) = -1.0*muu(i,j)*acc_u*cnst*fx
1147c1042
<            fn = 0.5*rho*v0_v*v0_v*cdh 
---
>            Thrust = 0.5*rho*v0_v*v0_v*cdh 
1149c1044
<            ft = 0.0
---
>            ! ft = 0.0
1153c1048
<            fy = fn*sin(theta) 
---
>            fy = Thrust*sin(theta) 
1170c1065
<                drvt = calc_yprime( 1.0/tan(tilt), 1.0, 0.0, (drv(i,j)-hoff), dzv(i,k,j) )  
---
>                drvt = calc_yprime_2( 1.0/tan(tilt), 1.0, 0.0, (drv(i,j)-hoff), dzv(i,k,j) )  
1172c1067
<                zd = calc_yprime( -tan(tilt), 1.0, 0.0, (drv(i,j)-hoff), dzv(i,k,j) )
---
>                zd = calc_yprime_2( -tan(tilt), 1.0, 0.0, (drv(i,j)-hoff), dzv(i,k,j) )
1184,1197c1079,1081
<                    if (turbine_opt .eq. 15) then
<       !                print*,'radius',radius,'blade_length',blade_length(n),'rotor_diameter',rotor_diameter(n),'dscale',dscale
<                       fnft = calc_fnft_psu15( v0_v, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<        !               print*,'done v-component'
<                    elseif (turbine_opt .eq. 16) then
<                       fnft = calc_fnft_ge16( v0_v, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)  
<                    elseif (turbine_opt .eq. 28) then
<                       fnft = calc_fnft_ge28( v0_v, rho, blades, blade_length(n),rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale,cscale)
<                    elseif (turbine_opt .eq. 100) then
<                       fnft = calc_fnft_dtu10( v0_v, rho, blades,blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
---
>                   ! ct_p = calc_ct_p_ge28(v0_v)
>                    if (turbine_opt .eq. 28) then
>                        ct_p = calc_ct_p_ge28(v0_v)
1199,1200c1083
<                       fnft = calc_fnft_nrel5( v0_v, rho,blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
---
>                        ct_p = calc_ct_p_nrel5(v0_v)
1201a1085,1086
>                    CT = ct_p(1)
>                    P = ct_p(2)
1203,1204c1088
<                    fn = fnft(1)
<                    ft = fnft(2)
---
>                    Thrust = 0.5*rho*v0_v*v0_v*CT
1206c1090,1091
<                    fy = fn*sin(theta)*cos(tilt) - ft*sin(zeta)*cos(theta) - ft*cos(zeta)*sin(tilt)*sin(theta)!NM 
---
> 
>                    fy = Thrust*sin(theta)*cos(tilt) ! - ft*sin(zeta)*cos(theta) - ft*cos(zeta)*sin(tilt)*sin(theta)!NM 
1213,1215d1097
< !JDM TEST SIGN 12/2014      fy = fn*sin(theta)*cos(tilt)
< !JDM TEST SIGN 12/2014      fy = -ft*sin(zeta)*cos(theta)
< !JDM TEST SIGN 12/2014      fy = -ft*cos(zeta)*sin(tilt)*sin(theta)
1220d1101
< !JDM            wp_ts(i,k,j) = -1.0*muv(i,j)*acc_v*cnst*fy
1236c1117
<                  drwt = calc_yprime( 1.0/tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzw(i,k,j) ) 
---
>                  drwt = calc_yprime_2( 1.0/tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzw(i,k,j) ) 
1238c1119
<                  zd = calc_yprime( -tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzw(i,k,j) ) 
---
>                  zd = calc_yprime_2( -tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzw(i,k,j) ) 
1250,1267c1131,1136
<                  if (turbine_opt .eq. 15) then
<         !            print*,'radius',radius,'blade_length',blade_length(n),'rotor_diameter',rotor_diameter(n),'dscale',dscale
<                     fnft = calc_fnft_psu15( v0_w, rho, blades, blade_length(n), rotor_diameter(n), &
<                                             radius, pitchdeg, rpm, dscale, cscale )
<          !           print*,'done w-component' 
<                  elseif (turbine_opt .eq. 16) then 
<                     fnft = calc_fnft_ge16( v0_w, rho, blades, blade_length(n), rotor_diameter(n), &
<                                             radius, pitchdeg, rpm, dscale, cscale )
<                 elseif (turbine_opt .eq. 28) then
<                     fnft = calc_fnft_ge28( v0_w, rho, blades, blade_length(n),rotor_diameter(n), &
<                                             radius, pitchdeg, rpm, dscale,cscale )
<                 elseif (turbine_opt .eq. 100) then
<                       fnft = calc_fnft_dtu10( v0_w, rho, blades,blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 elseif (turbine_opt .eq. 50) then
<                       fnft = calc_fnft_nrel5( v0_w, rho,blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 endif
---
>                    ! ct_p = calc_ct_p_ge28(v0_w)
>                    if (turbine_opt .eq. 28) then
>                        ct_p = calc_ct_p_ge28(v0_w)
>                    elseif (turbine_opt .eq. 50) then
>                        ct_p = calc_ct_p_nrel5(v0_w)
>                    endif
1269,1270c1138,1139
<                  fn = fnft(1)
<                  ft = fnft(2) 
---
>                    CT = ct_p(1)
>                    P = ct_p(2)
1272,1275c1141,1145
<                  fz = -fn*sin(tilt) - ft*cos(zeta)*cos(tilt)
<                 if (isnan(fz)) then
<                         print*,'fz is NaN fn=',fn,'sin(tilt)=',sin(tilt),'ft=',ft,'cos(zeta)=',cos(zeta),'cos(tilt)=',cos(tilt)
<                 endif
---
>                    Thrust = 0.5*rho*v0_w*v0_w*CT
> 
> 
> 
>                  fz = -Thrust*sin(tilt) ! - ft*cos(zeta)*cos(tilt)
1282,1283d1151
< !JDM TEST SIGN      fz = -fn*sin(tilt) 
< !JDM TEST SIGN      fz = -ft*cos(zeta)*cos(tilt) 
1297c1165
<            ft = 0.0 !NM no tangential force
---
>            ! ft = 0.0 !NM no tangential force
1311c1179
<                 drct = calc_yprime( 1.0/tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzc(i,k,j) ) 
---
>                 drct = calc_yprime_2( 1.0/tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzc(i,k,j) ) 
1313c1181
<                 zd = calc_yprime( -tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzc(i,k,j) ) 
---
>                 zd = calc_yprime_2( -tan(tilt), 1.0, 0.0, (drw(i,j)-hoff), dzc(i,k,j) ) 
1325,1342c1193,1200
<                 if (turbine_opt .eq. 15) then
< !                   print*,'radius',radius,'blade_length',blade_length(n),'rotor_diameter',rotor_diameter(n),'dscale',dscale
<                    fnft = calc_fnft_psu15( v0_c, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale) 
<  !                  print*,'done c-component'
<                 elseif (turbine_opt .eq. 16) then
<                    fnft = calc_fnft_ge16( v0_c, rho, blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 elseif (turbine_opt .eq. 28) then
<                    fnft = calc_fnft_ge28( v0_c, rho, blades, blade_length(n),rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale,cscale)
<                 elseif (turbine_opt .eq. 100) then
<                       fnft = calc_fnft_dtu10( v0_c, rho, blades,blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 elseif (turbine_opt .eq. 50) then
<                       fnft = calc_fnft_nrel5( v0_c, rho,blades, blade_length(n), rotor_diameter(n),   &
<                                               radius, pitchdeg, rpm, dscale, cscale)
<                 endif
---
>                    ! ct_p = calc_ct_p_ge28(v0_c)
>                    if (turbine_opt .eq. 28) then
>                        ct_p = calc_ct_p_ge28(v0_c)
>                    elseif (turbine_opt .eq. 50) then
>                        ct_p = calc_ct_p_nrel5(v0_c)
>                    endif
>                    CT = ct_p(1)
>                    P = ct_p(2)
1344c1202
<                 ft = fnft(2)
---
>                    Power = P
1346,1349d1203
<               else
<                 !RSA set fx to 0 for now, but turbine should eventually yaw into place.
<                 ! write(*,*) "RSA to prevent NaNs, skipping call to calc_fnft for fx: i,j,k=",i,j,k 
<                 ft = 0.0
1354,1365d1207
< !!         Assuming turbine rotors are perpendicualar to x axis. Generalize to arbitrary orientation.  
< !
< !!            IF ( ru(i,k,j) .lt. rotor_radius ) THEN
< !               thrust(i,j) = thrust(i,j) +                             &
< !                             wp_acc_u(i,k,j)*fn
< !               torque(i,j) = torque(i,j) +                             &
< !                             wp_acc_u(i,k,j)*ru(i,k,j)*ft
< !                power(i,j)  = power(i,j)  +                             &
< !                             wp_acc_u(i,k,j)*rotrate(i,j)*ru(i,k,j)*ft
< !!            ENDIF
< !!
< 
1367c1209,1210
<               turb_power_local(n) = turb_power_local(n) + omega(n)*ft*acc_c*rc(i,k,j)*dx*dy*dz(i,k,j)
---
>               turb_power_local(n) = turb_power_local(n) + Power !omega(n)*ft*acc_c*rc(i,k,j)*dx*dy*dz(i,k,j)
>               count_turb_power_local(n) = count_turb_power_local(n) + 1
1378c1221
<  !      print*,'Turbine did start operating'            
---
>        print*,'Turbine did start operating'            
1384a1228
> 
1388a1233,1244
>   CALL MPI_REDUCE(count_turb_power_local,count_turb_power,n_turbines,MPI_REAL,MPI_SUM,master,MPI_COMM_WORLD,ierr)
>   DO n = 1, n_turbines
>       if (count_turb_power(n) .gt. 0.0) then
>           turb_power(n) = turb_power(n)/count_turb_power(n)
>       endif
>   ENDDO  !n loop over all turbines
> #else
>   DO n = 1, n_turbines
>       if (count_turb_power_local(n) .gt. 0.0) then
>           turb_power(n) = turb_power_local(n)/count_turb_power_local(n)
>       endif
>   ENDDO  !n loop over all turbines
1389a1246
> 
1392c1249
< END SUBROUTINE gen_act_disk
---
> END SUBROUTINE nonRot_act_disk
1396c1253
< SUBROUTINE calc_distance( x_turb, y_turb, theta_turb,     &
---
> SUBROUTINE calc_distance_2( x_turb, y_turb, theta_turb,     &
1431a1289
>   REAL :: pi=3.1415926535897932384626433
1514,1525d1371
< !JDM calc_distline returns unsigned distance.
< !JDM ! calculate distance to the turbine axis in (x,y) plane
< !JDM           dau(i,j)=calc_distline(aa,ba,ca,x0u,y0u)
< !JDM           dav(i,j)=calc_distline(aa,ba,ca,x0v,y0v)
< !JDM           daw(i,j)=calc_distline(aa,ba,ca,x0w,y0w)
< !JDM 
< !JDM ! calculate distance to the rotor plane of the turbine in (x,y) plane
< !JDM            dru(i,j)=calc_distline(ar,br,cr,x0u,y0u)
< !JDM            drv(i,j)=calc_distline(ar,br,cr,x0v,y0v)
< !JDM            drw(i,j)=calc_distline(ar,br,cr,x0w,y0w)
< 
< !JDM calc_yprime returns signed distance. 
1529,1531c1375,1377
<          dau(i,j)=calc_yprime(aa,ba,ca,x0u,y0u)
<          dav(i,j)=calc_yprime(aa,ba,ca,x0v,y0v)
<          daw(i,j)=calc_yprime(aa,ba,ca,x0w,y0w)
---
>          dau(i,j)=calc_yprime_2(aa,ba,ca,x0u,y0u)
>          dav(i,j)=calc_yprime_2(aa,ba,ca,x0v,y0v)
>          daw(i,j)=calc_yprime_2(aa,ba,ca,x0w,y0w)
1535,1537c1381,1383
<          dru(i,j)=calc_yprime(ar,br,cr,x0u,y0u)
<          drv(i,j)=calc_yprime(ar,br,cr,x0v,y0v)
<          drw(i,j)=calc_yprime(ar,br,cr,x0w,y0w)
---
>          dru(i,j)=calc_yprime_2(ar,br,cr,x0u,y0u)
>          drv(i,j)=calc_yprime_2(ar,br,cr,x0v,y0v)
>          drw(i,j)=calc_yprime_2(ar,br,cr,x0w,y0w)
1542c1388
< END SUBROUTINE calc_distance
---
> END SUBROUTINE calc_distance_2
1549c1395
< FUNCTION calc_distline( a, b, c, x0, y0 ) result( distline ) 
---
> FUNCTION calc_distline_2( a, b, c, x0, y0 ) result( distline ) 
1557c1403
< END FUNCTION calc_distline
---
> END FUNCTION calc_distline_2
1564c1410
< FUNCTION calc_yprime( a, b, c, x0, y0 ) result( yprime ) 
---
> FUNCTION calc_yprime_2( a, b, c, x0, y0 ) result( yprime ) 
1572c1418
< END FUNCTION calc_yprime
---
> END FUNCTION calc_yprime_2
1576,1601d1421
< !==============================================================================
< !
< !      Functions to check a variable is NaN or Inf
< !
< !----------------------------------------------------------------------
< FUNCTION check_naninf( rnaninf, snaninf ) result( naninf )
< !
<     real, intent( in )             :: rnaninf
<     character(len=8), intent( in ) :: snaninf
<     integer                        :: naninf
< !
<     naninf=0
< !
<     IF ( rnaninf*0 .NE. 0 ) THEN
<       print *, ' Variable ',snaninf,' = ',rnaninf,' is Inf'
<       naninf=1
<     ENDIF
< !   
<     IF ( rnan .NE. rnan ) THEN
<       print *, ' Variable ',srnaninf,' = ',rnaninf,' is NaN'
<       naninf=2
<     ENDIF
< !_________________________________________________________________________
<   
< END FUNCTION check_naninf
< !_________________________________________________________________________
1603c1423
< END MODULE module_gen_act_disk
---
> END MODULE module_nonrot_act_disk
